export const AlgoTags: { label: string, value: string }[] = [
  { label: "Array", value: "array" },
  { label: "String", value: "string" },
  { label: "Linked List", value: "linked-list" },
  { label: "Stack", value: "stack" },
  { label: "Queue", value: "queue" },
  { label: "Deque", value: "deque" },
  { label: "Tree", value: "tree" },
  { label: "Binary Tree", value: "binary-tree" },
  { label: "Binary Search Tree", value: "binary-search-tree" },
  { label: "Heap", value: "heap" },
  { label: "Trie", value: "trie" },
  { label: "Graph", value: "graph" },
  { label: "Hashmap", value: "hashmap" },
  { label: "Set", value: "set" },

  { label: "Sorting", value: "sorting" },
  { label: "Binary Search", value: "binary-search" },
  { label: "Sliding Window", value: "sliding-window" },
  { label: "Two Pointers", value: "two-pointers" },
  { label: "Prefix Sum", value: "prefix-sum" },
  { label: "Difference Array", value: "difference-array" },
  { label: "Greedy", value: "greedy" },
  { label: "Recursion", value: "recursion" },
  { label: "Backtracking", value: "backtracking" },
  { label: "Divide and Conquer", value: "divide-and-conquer" },
  { label: "Bit Manipulation", value: "bit-manipulation" },
  { label: "Dynamic Programming", value: "dp" },
  { label: "Memoization", value: "memoization" },
  { label: "Tabulation", value: "tabulation" },
  { label: "Knapsack", value: "knapsack" },
  { label: "Tree DP", value: "tree-dp" },
  { label: "Digit DP", value: "digit-dp" },
  { label: "Monotonic Stack", value: "monotonic-stack" },
  { label: "Monotonic Queue", value: "monotonic-queue" },
  { label: "Stack Optimization", value: "stack-optimization" },
  { label: "Queue Optimization", value: "queue-optimization" },
  { label: "Binary Lifting", value: "binary-lifting" },
  { label: "DFS", value: "dfs" },
  { label: "BFS", value: "bfs" },
  { label: "Topological Sort", value: "topological-sort" },
  { label: "Dijkstra", value: "dijkstra" },
  { label: "Bellman-Ford", value: "bellman-ford" },
  { label: "Floyd Warshall", value: "floyd-warshall" },
  { label: "Union Find", value: "union-find" },
  { label: "Disjoint Set", value: "disjoint-set" },
  { label: "Kruskal", value: "kruskal" },
  { label: "Prim", value: "prim" },
  { label: "Minimum Spanning Tree", value: "mst" },
  { label: "Cycle Detection", value: "cycle-detection" },
  { label: "Bridges", value: "bridges" },
  { label: "Articulation Point", value: "articulation-point" },
  { label: "Lowest Common Ancestor", value: "lca" },
  { label: "Tarjan's Algorithm", value: "tarjan" },

  { label: "Combinatorics", value: "combinatorics" },
  { label: "Modular Arithmetic", value: "modular-arithmetic" },
  { label: "Number Theory", value: "number-theory" },
  { label: "Sieve of Eratosthenes", value: "sieve" },
  { label: "GCD", value: "gcd" },
  { label: "LCM", value: "lcm" },
  { label: "Prime Factorization", value: "prime-factorization" },
  { label: "Mod Inverse", value: "mod-inverse" },
  { label: "Prefix GCD", value: "prefix-gcd" },
  { label: "Segment GCD", value: "segment-gcd" },

  { label: "Segment Tree", value: "segment-tree" },
  { label: "Fenwick Tree", value: "fenwick-tree" },
  { label: "Binary Indexed Tree", value: "bit" },
  { label: "Lazy Propagation", value: "lazy-propagation" },
  { label: "Sparse Table", value: "sparse-table" },
  { label: "Range Query", value: "range-query" },
  { label: "Range Update", value: "range-update" },
  { label: "Persistent Data Structure", value: "persistent" },
  { label: "Treap", value: "treap" },
  { label: "Splay Tree", value: "splay-tree" },
  { label: "Link/Cut Tree", value: "link-cut-tree" },

  { label: "Geometry", value: "geometry" },
  { label: "Convex Hull", value: "convex-hull" },
  { label: "Line Sweep", value: "line-sweep" },
  { label: "Manacher's Algorithm", value: "manacher" },
  { label: "Z-Algorithm", value: "z-algorithm" },
  { label: "KMP", value: "kmp" },
  { label: "Suffix Array", value: "suffix-array" },
  { label: "Hashing", value: "hashing" },
  { label: "Rolling Hash", value: "rolling-hash" },
  { label: "Aho-Corasick", value: "aho-corasick" },

  { label: "Game Theory", value: "game-theory" },
  { label: "Nim Game", value: "nim-game" },
  { label: "Simulation", value: "simulation" },
  { label: "Greedy + Binary Search", value: "greedy-binary-search" },
  { label: "Brute Force", value: "brute-force" },
  { label: "Offline Queries", value: "offline-queries" },
  { label: "Meet in the Middle", value: "meet-in-the-middle" },

  { label: "Interactive", value: "interactive" },
  { label: "Constructive Algorithms", value: "constructive" },
  { label: "Bitmask", value: "bitmask" },
  { label: "Subsets", value: "subsets" },
  { label: "Combinations", value: "combinations" },
  { label: "Multisets", value: "multisets" },
  { label: "Randomized", value: "randomized" },
];
